// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CheckDirService.proto

package org.apache.spark.sql.hbase;

public final class CheckDirProtos {
  private CheckDirProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface CheckRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code CheckRequest}
   */
  public static final class CheckRequest extends
      com.google.protobuf.GeneratedMessage
      implements CheckRequestOrBuilder {
    // Use CheckRequest.newBuilder() to construct.
    private CheckRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CheckRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CheckRequest defaultInstance;
    public static CheckRequest getDefaultInstance() {
      return defaultInstance;
    }

    public CheckRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CheckRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest.class, org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest.Builder.class);
    }

    public static com.google.protobuf.Parser<CheckRequest> PARSER =
        new com.google.protobuf.AbstractParser<CheckRequest>() {
      public CheckRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CheckRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CheckRequest> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest other = (org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest) obj;

      boolean result = true;
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CheckRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.apache.spark.sql.hbase.CheckDirProtos.CheckRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest.class, org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest.Builder.class);
      }

      // Construct using org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckRequest_descriptor;
      }

      public org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest getDefaultInstanceForType() {
        return org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest.getDefaultInstance();
      }

      public org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest build() {
        org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest buildPartial() {
        org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest result = new org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest) {
          return mergeFrom((org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest other) {
        if (other == org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:CheckRequest)
    }

    static {
      defaultInstance = new CheckRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:CheckRequest)
  }

  public interface CheckResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required bool accessible = 1;
    /**
     * <code>required bool accessible = 1;</code>
     */
    boolean hasAccessible();
    /**
     * <code>required bool accessible = 1;</code>
     */
    boolean getAccessible();
  }
  /**
   * Protobuf type {@code CheckResponse}
   */
  public static final class CheckResponse extends
      com.google.protobuf.GeneratedMessage
      implements CheckResponseOrBuilder {
    // Use CheckResponse.newBuilder() to construct.
    private CheckResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CheckResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CheckResponse defaultInstance;
    public static CheckResponse getDefaultInstance() {
      return defaultInstance;
    }

    public CheckResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CheckResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              accessible_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.class, org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.Builder.class);
    }

    public static com.google.protobuf.Parser<CheckResponse> PARSER =
        new com.google.protobuf.AbstractParser<CheckResponse>() {
      public CheckResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CheckResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CheckResponse> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bool accessible = 1;
    public static final int ACCESSIBLE_FIELD_NUMBER = 1;
    private boolean accessible_;
    /**
     * <code>required bool accessible = 1;</code>
     */
    public boolean hasAccessible() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bool accessible = 1;</code>
     */
    public boolean getAccessible() {
      return accessible_;
    }

    private void initFields() {
      accessible_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasAccessible()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, accessible_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, accessible_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse other = (org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse) obj;

      boolean result = true;
      result = result && (hasAccessible() == other.hasAccessible());
      if (hasAccessible()) {
        result = result && (getAccessible()
            == other.getAccessible());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasAccessible()) {
        hash = (37 * hash) + ACCESSIBLE_FIELD_NUMBER;
        hash = (53 * hash) + hashBoolean(getAccessible());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CheckResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.apache.spark.sql.hbase.CheckDirProtos.CheckResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.class, org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.Builder.class);
      }

      // Construct using org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        accessible_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.hbase.CheckDirProtos.internal_static_CheckResponse_descriptor;
      }

      public org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse getDefaultInstanceForType() {
        return org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.getDefaultInstance();
      }

      public org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse build() {
        org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse buildPartial() {
        org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse result = new org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.accessible_ = accessible_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse) {
          return mergeFrom((org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse other) {
        if (other == org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.getDefaultInstance()) return this;
        if (other.hasAccessible()) {
          setAccessible(other.getAccessible());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAccessible()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bool accessible = 1;
      private boolean accessible_ ;
      /**
       * <code>required bool accessible = 1;</code>
       */
      public boolean hasAccessible() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bool accessible = 1;</code>
       */
      public boolean getAccessible() {
        return accessible_;
      }
      /**
       * <code>required bool accessible = 1;</code>
       */
      public Builder setAccessible(boolean value) {
        bitField0_ |= 0x00000001;
        accessible_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool accessible = 1;</code>
       */
      public Builder clearAccessible() {
        bitField0_ = (bitField0_ & ~0x00000001);
        accessible_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:CheckResponse)
    }

    static {
      defaultInstance = new CheckResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:CheckResponse)
  }

  /**
   * Protobuf service {@code CheckDirService}
   */
  public static abstract class CheckDirService
      implements com.google.protobuf.Service {
    protected CheckDirService() {}

    public interface Interface {
      /**
       * <code>rpc getCheckResult(.CheckRequest) returns (.CheckResponse);</code>
       */
      public abstract void getCheckResult(
          com.google.protobuf.RpcController controller,
          org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest request,
          com.google.protobuf.RpcCallback<org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse> done);

    }

    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new CheckDirService() {
        @java.lang.Override
        public  void getCheckResult(
            com.google.protobuf.RpcController controller,
            org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest request,
            com.google.protobuf.RpcCallback<org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse> done) {
          impl.getCheckResult(controller, request, done);
        }

      };
    }

    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }

        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.getCheckResult(controller, (org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

      };
    }

    /**
     * <code>rpc getCheckResult(.CheckRequest) returns (.CheckResponse);</code>
     */
    public abstract void getCheckResult(
        com.google.protobuf.RpcController controller,
        org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest request,
        com.google.protobuf.RpcCallback<org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse> done);

    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return org.apache.spark.sql.hbase.CheckDirProtos.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }

    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.getCheckResult(controller, (org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest)request,
            com.google.protobuf.RpcUtil.<org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }

    public static final class Stub extends org.apache.spark.sql.hbase.CheckDirProtos.CheckDirService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.RpcChannel channel;

      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }

      public  void getCheckResult(
          com.google.protobuf.RpcController controller,
          org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest request,
          com.google.protobuf.RpcCallback<org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.class,
            org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.getDefaultInstance()));
      }
    }

    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }

    public interface BlockingInterface {
      public org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse getCheckResult(
          com.google.protobuf.RpcController controller,
          org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest request)
          throws com.google.protobuf.ServiceException;
    }

    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.BlockingRpcChannel channel;

      public org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse getCheckResult(
          com.google.protobuf.RpcController controller,
          org.apache.spark.sql.hbase.CheckDirProtos.CheckRequest request)
          throws com.google.protobuf.ServiceException {
        return (org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          org.apache.spark.sql.hbase.CheckDirProtos.CheckResponse.getDefaultInstance());
      }

    }

    // @@protoc_insertion_point(class_scope:CheckDirService)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CheckRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CheckRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CheckResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CheckResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025CheckDirService.proto\"\016\n\014CheckRequest\"" +
      "#\n\rCheckResponse\022\022\n\naccessible\030\001 \002(\0102B\n\017" +
      "CheckDirService\022/\n\016getCheckResult\022\r.Chec" +
      "kRequest\032\016.CheckResponseB4\n\032org.apache.s" +
      "park.sql.hbaseB\016CheckDirProtosH\001\210\001\001\240\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_CheckRequest_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_CheckRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CheckRequest_descriptor,
              new java.lang.String[] { });
          internal_static_CheckResponse_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_CheckResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CheckResponse_descriptor,
              new java.lang.String[] { "Accessible", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
